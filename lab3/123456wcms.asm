.386					; Указывает, что код будет скомпилирован для архитектуры x86 (IA-32).
.model flat, stdcall	; Устанавливает модель памяти "flat" и соглашение о вызовах "stdcall".
option casemap :none	; Вкл чувствительность к регистрам
include includes\user32.inc		; подключение файла описаний процедур и констант
include includes\kernel32.inc
includelib includes\user32.lib	; подключение библиотек с реализацией описаний
includelib includes\kernel32.lib

BSIZE equ 15	; Определяет константу BSIZE, равную 15, для указания размера буфера.

.data               ; Начало секции данных, где будут храниться переменные.
    ifmt db "%d", 0         ; Определяет строку формата для вывода чисел, заканчивающуюся нулем.
                            ; - 13 — символ Carriage Return (CR), который переводит курсор в начало строки.
                            ; - 10 — символ Line Feed (LF), который переходит на следующую строку.
    - 0 — нулевой символ, завершающий строку.
    buf db BSIZE dup(?)     ; Создает массив буфера размером BSIZE (15), инициализированный значением "неопределённо".
    msg dd 123456           ; Определяет переменную msg и инициализирует ее значением 123456, которое будет выводиться.
    stdout dd ?             ; Определяет переменную stdout для хранения дескриптора стандартного вывода.
    cWritten dd ?           ; Определяет переменную cWritten для хранения количества записанных байт.

.code               ; Начало секции кода, где будет написана программа.
    start:                  ; Метка начала выполнения программы.
    invoke GetStdHandle, -11    ; Вызов функции GetStdHandle для получения дескриптора стандартного вывода
                                ; (ID -11 соответствует STD_OUTPUT_HANDLE). Результат помещается в регистр EAX.
    mov ebp, offset msg         ; Помещает адрес переменной msg в регистр ebp.
    mov esi, 0                  ; Инициализация указателя esi, который будет использоваться для доступа к переменной msg.
    mov ebx,[ebp][esi]          ; Загружает значение переменной msg в регистр ebx 
                                ; (через адрес, который хранится в ebp, и индекс, который хранится в esi).
    mov stdout,eax              ; Сохраняет дескриптор стандартного вывода, полученный ранее в reg EAX, в переменную stdout.

    invoke wsprintf, ADDR buf, ADDR ifmt, msg
    ; для форматирования строки: записывает в buf строковое представление числа msg согласно ifmt.

    invoke WriteConsoleA, stdout, ADDR buf, BSIZE, ADDR cWritten, 0
    ; 1 // Дескриптор консольного ввода/вывода HANDLE 
    ; 2 // Буфер, содержащий данные для вывода/записи 
    ; 3 // Макс Количество символов для вывода/ввода DWORD
    ; 4 // Количество записанных/прочитанных символов
    ; 5 // 0 - не используется
    ; addr передаёт адрес

    invoke ExitProcess, 0   ; Завершает выполнение программы, передавая 0 как код завершения.
end start   ; Указывает конец программы и определяет метку start как точку входа для выполнения.
